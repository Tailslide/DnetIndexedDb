@page "/"
@using DnetIndexedDbServer.Infrastructure
@using DnetIndexedDbServer.Infrastructure.Entities
@using System.Text.Json
@using DnetIndexedDbServer.Infrastructure.Models
@inject IHttpClientFactory ClientFactory

@inject IJSRuntime JSRuntime

@inject GridColumnDataIndexedDb GridColumnDataIndexedDb
@inject GridColumnDataIndexedDb2 GridColumnDataIndexedDb2
@inject SecuritySuiteDataIndexedDb SecuritySuiteDataIndexedDb
@inject DataRawDbDataIndexedDb DataRawDbDataIndexedDb

<div class="dnet-desktop-content destok-layout" style="padding-top: 10px;">
    <div class="row" style="height: calc(100% - 0px)">
        <div class="col-12" style="height: calc(100% - 0px);">
            <div style="height: calc(100% - 0px); width: 100%; background-color: #FFFFFF">
                <span>Thanks for your interest in DnetIndexedDb!. Go to Index.razor and debug</span>
            </div>
        </div>
    </div>
</div>

@code {

    private TableFieldDto _tableFieldDto;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await InlineKeys();
            //await TestAttributes();
            //await InlineKeysPlusKeyGenerator();
            //await OutOfLinekeys();
            //await InlineKeysTwoDatabases();
            //await TestUpgrade();
            await DataRaw();
        }
    }

    private async Task TestUpgrade()
    {
        var db1Result = await GridColumnDataIndexedDb.OpenIndexedDb();
    }

    //***Data Raw***
    private async Task DataRaw()
    {
        var tableFieldService = new TableFieldService();

        var itemsDb1 = tableFieldService.GetTableFields();

        var jsonSrting = JsonSerializer.Serialize<List<TableFieldDto>>(itemsDb1);

        var db1Result = await DataRawDbDataIndexedDb.OpenIndexedDb();

        var indexedDbRawTable = new IndexedDbRawTable()
            {
                RowId = 1,
                Data = jsonSrting
            };

        var db1Result2 = await DataRawDbDataIndexedDb.AddItems<IndexedDbRawTable>("dataraw", new List<IndexedDbRawTable>() { indexedDbRawTable });

        var db1Result3 = await DataRawDbDataIndexedDb.GetByKey<int, IndexedDbRawTable>("dataraw", 1);

        var items = JsonSerializer.Deserialize<List<TableFieldDto>>(db1Result3.Data);

        var db1Result4 = await DataRawDbDataIndexedDb.DeleteIndexedDb();
    }

    //***in-line-keys (default)***
    //KeyPath != ""
    //KeyPath property in class has value
    //UseKeyGenerator property in IndexedDbDatabaseModel has no meaning
    //Use "UpdateItems" method to update items
    private async Task InlineKeys()
    {
        var tableFieldService = new TableFieldService();

        var itemsDb1 = tableFieldService.GetTableFields();

        var db1Result = await GridColumnDataIndexedDb.OpenIndexedDb();

        if (db1Result != -1)
        {
            var db1Result1 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");
        }

        var db1Result2 = await GridColumnDataIndexedDb.AddItems<TableFieldDto>("TableFieldDtos", itemsDb1);

        var db1Result3 = await GridColumnDataIndexedDb.GetByKey<int, TableFieldDto>("TableFieldDtos", 11);

        var db1Result4 = await GridColumnDataIndexedDb.DeleteByKey<int>("TableFieldDtos", 11);

        var db1Result5 = await GridColumnDataIndexedDb.GetAll<TableFieldDto>("TableFieldDtos");

        var db1Result6 = await GridColumnDataIndexedDb.GetRange<int, TableFieldDto>("TableFieldDtos", 15, 20);

        foreach (var item in db1Result5)
        {
            item.FieldVisualName = item.FieldVisualName + "Updated";
        }

        var keyMax = await GridColumnDataIndexedDb.GetMaxKey<int>("TableFieldDtos");

        var keyMin = await GridColumnDataIndexedDb.GetMinKey<int>("TableFieldDtos");

        var indexMaxTask = GridColumnDataIndexedDb.GetMaxIndex<string>("TableFieldDtos", "attachedProperty");

        var indexMaxTask2 = GridColumnDataIndexedDb.GetMaxIndex<string>("TableFieldDtos", "attachedProperty");

        var indexMinTask = GridColumnDataIndexedDb.GetMinIndex<string>("TableFieldDtos", "attachedProperty");

        var indexMax = await indexMaxTask;

        var indexMax2 = await indexMaxTask2;

        var indexMin = await indexMinTask;

        var db1Result7a = await GridColumnDataIndexedDb.UpdateItems<TableFieldDto>("TableFieldDtos", db1Result5.ToList());

        var db1Result8 = await GridColumnDataIndexedDb.GetByIndex<int, TableFieldDto>("TableFieldDtos", 11, 18, "tableFieldId", true);

        var db1Result9 = await GridColumnDataIndexedDb.GetByIndex<int?, TableFieldDto>("TableFieldDtos", 11, null, "tableFieldId", false);

        var db1Result10 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");

        var testMaxKeyEmpty = await GridColumnDataIndexedDb.GetMaxKey<int>("TableFieldDtos");

        var testMinKeyEmpty = await GridColumnDataIndexedDb.GetMinKey<int>("TableFieldDtos");

        var testMaxIndexEmpty = await GridColumnDataIndexedDb.GetMaxIndex<string>("TableFieldDtos", "tableFieldId");

        var testMinIndexEmpty = await GridColumnDataIndexedDb.GetMinIndex<string>("TableFieldDtos", "tableFieldId");

        var db1Result11 = await GridColumnDataIndexedDb.DeleteIndexedDb();
    }

    private async Task TestAttributes()
    {
        var tableFieldService = new TableFieldService();

        var itemsDb1 = tableFieldService.GetTableFields();

        var db1Result = await GridColumnDataIndexedDb2.OpenIndexedDb();

        if (db1Result != -1)
        {
            var db1Result1 = await GridColumnDataIndexedDb2.DeleteAll<TableFieldDto>();
        }

        var db1Result2 = await GridColumnDataIndexedDb2.AddItems<TableFieldDto>(itemsDb1);

        var db1Result3 = await GridColumnDataIndexedDb2.GetByKey<int, TableFieldDto>(11);

        var db1Result4 = await GridColumnDataIndexedDb2.DeleteByKey<int, TableFieldDto>(11);

        var db1Result5 = await GridColumnDataIndexedDb2.GetAll<TableFieldDto>();

        var db1Result6 = await GridColumnDataIndexedDb2.GetRange<int, TableFieldDto>(15, 20);

        foreach (var item in db1Result5)
        {
            item.FieldVisualName = item.FieldVisualName + "Updated";
        }

        var db1Result7a = await GridColumnDataIndexedDb2.UpdateItems<TableFieldDto>(db1Result5.ToList());

        var db1Result8 = await GridColumnDataIndexedDb2.GetByIndex<int, TableFieldDto>(11, 18, "tableFieldId", true);

        var db1Result9 = await GridColumnDataIndexedDb2.GetByIndex<int?, TableFieldDto>(11, null, "tableFieldId", false);

        var testMaxKeyEmpty = await GridColumnDataIndexedDb2.GetMaxKey<int, TableFieldDto>();

        var testMinKeyEmpty = await GridColumnDataIndexedDb2.GetMinKey<int, TableFieldDto>();

        var testMaxIndexEmpty = await GridColumnDataIndexedDb2.GetMaxIndex<int, TableFieldDto>("tableFieldId");

        var testMinIndexEmpty = await GridColumnDataIndexedDb2.GetMinIndex<int, TableFieldDto>("tableFieldId");

        var db1Result10 = await GridColumnDataIndexedDb2.DeleteAll<TableFieldDto>();

        var db1Result11 = await GridColumnDataIndexedDb2.DeleteIndexedDb();
    }

    //***in-line-keys using Key generators***
    //KeyPath != ""
    //KeyPath property in class equal to null
    //UseKeyGenerator property in IndexedDbDatabaseModel set to true
    //Use "UpdateItems" method to update items
    private async Task InlineKeysPlusKeyGenerator()
    {
        var tableFieldService = new TableFieldService();

        var itemsDb1 = tableFieldService.GetTableFields();

        var db1Result = await GridColumnDataIndexedDb.OpenIndexedDb();

        if (db1Result != -1)
        {
            var db1Result1 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");
        }

        var db1Result2 = await GridColumnDataIndexedDb.AddItems<TableFieldDto>("TableFieldDtos", itemsDb1);

        var db1Result3 = await GridColumnDataIndexedDb.GetByKey<int, TableFieldDto>("TableFieldDtos", 11);

        var db1Result4 = await GridColumnDataIndexedDb.DeleteByKey<int>("TableFieldDtos", 11);

        var db1Result5 = await GridColumnDataIndexedDb.GetAll<TableFieldDto>("TableFieldDtos");

        var db1Result6 = await GridColumnDataIndexedDb.GetRange<int, TableFieldDto>("TableFieldDtos", 15, 20);

        foreach (var item in db1Result5)
        {
            item.FieldVisualName = item.FieldVisualName + "Updated";
        }

        var db1Result7a = await GridColumnDataIndexedDb.UpdateItems<TableFieldDto>("TableFieldDtos", db1Result5.ToList());

        var db1Result8 = await GridColumnDataIndexedDb.GetByIndex<int, TableFieldDto>("TableFieldDtos", 11, 18, "tableFieldId", true);

        var db1Result9 = await GridColumnDataIndexedDb.GetByIndex<int?, TableFieldDto>("TableFieldDtos", 11, null, "tableFieldId", false);

        var db1Result10 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");

        var db1Result11 = await GridColumnDataIndexedDb.DeleteIndexedDb();
    }

    //out-of-line-keys
    //KeyPath = ""
    //Use "UpdateItemsByKey" method to update items
    private async Task OutOfLinekeys()
    {
        var tableFieldService = new TableFieldService();

        var itemsDb1 = tableFieldService.GetTableFields();

        var db1Result = await GridColumnDataIndexedDb.OpenIndexedDb();

        if (db1Result != -1)
        {
            var db1Result1 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");
        }

        var db1Result2 = await GridColumnDataIndexedDb.AddItems<TableFieldDto>("TableFieldDtos", itemsDb1);

        var db1Result3 = await GridColumnDataIndexedDb.GetByKey<int, TableFieldDto>("TableFieldDtos", 11);

        var db1Result4 = await GridColumnDataIndexedDb.DeleteByKey<int>("TableFieldDtos", 11);

        var db1Result5 = await GridColumnDataIndexedDb.GetAll<TableFieldDto>("TableFieldDtos");

        var db1Result6 = await GridColumnDataIndexedDb.GetRange<int, TableFieldDto>("TableFieldDtos", 15, 20);

        foreach (var item in db1Result5)
        {
            item.FieldVisualName = item.FieldVisualName + "Updated";
        }

        var db1Result7a = await GridColumnDataIndexedDb.UpdateItemsByKey<TableFieldDto>("TableFieldDtos", db1Result5.Take(3).ToList(), new List<int> { 1, 2, 3 });

        var db1Result8 = await GridColumnDataIndexedDb.GetByIndex<int, TableFieldDto>("TableFieldDtos", 11, 18, "tableFieldId", true);

        var db1Result9 = await GridColumnDataIndexedDb.GetByIndex<int?, TableFieldDto>("TableFieldDtos", 11, null, "tableFieldId", false);

        var db1Result10 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");

        var db1Result11 = await GridColumnDataIndexedDb.DeleteIndexedDb();
    }

    //Working with more than one Database
    private async Task InlineKeysTwoDatabases()
    {
        var tableFieldService = new TableFieldService();

        var itemsDb1 = tableFieldService.GetTableFields();

        var itemsDb2 = tableFieldService.GetTableFields();

        var db1Result = await GridColumnDataIndexedDb.OpenIndexedDb();
        var db2Result = await SecuritySuiteDataIndexedDb.OpenIndexedDb();

        if (db1Result != -1)
        {
            var db1Result1 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");
        }

        if (db2Result != -1)
        {
            var db2Result1 = await SecuritySuiteDataIndexedDb.DeleteAll("TableFieldDtos");
        }

        var db1Result2 = await GridColumnDataIndexedDb.AddItems<TableFieldDto>("TableFieldDtos", itemsDb1);
        var db2Result2 = await SecuritySuiteDataIndexedDb.AddItems<TableFieldDto>("TableFieldDtos", itemsDb2);

        var db1Result3 = await GridColumnDataIndexedDb.GetByKey<int, TableFieldDto>("TableFieldDtos", 11);
        var db2Result3 = await SecuritySuiteDataIndexedDb.GetByKey<int, TableFieldDto>("TableFieldDtos", 11);

        var db1Result4 = await GridColumnDataIndexedDb.DeleteByKey<int>("TableFieldDtos", 11);
        var db2Result4 = await SecuritySuiteDataIndexedDb.DeleteByKey<int>("TableFieldDtos", 11);

        var db1Result5 = await GridColumnDataIndexedDb.GetAll<TableFieldDto>("TableFieldDtos");
        var db2Result5 = await SecuritySuiteDataIndexedDb.GetAll<TableFieldDto>("TableFieldDtos");

        var db1Result6 = await GridColumnDataIndexedDb.GetRange<int, TableFieldDto>("TableFieldDtos", 15, 20);
        var db2Result6 = await SecuritySuiteDataIndexedDb.GetRange<int, TableFieldDto>("TableFieldDtos", 15, 20);

        foreach (var item in db1Result5)
        {
            item.FieldVisualName = item.FieldVisualName + "Updated";
        }

        foreach (var item in db2Result5)
        {
            item.FieldVisualName = item.FieldVisualName + "Updated";
        }

        var db1Result7 = await GridColumnDataIndexedDb.UpdateItems<TableFieldDto>("TableFieldDtos", db1Result5);
        var db2Result7 = await SecuritySuiteDataIndexedDb.UpdateItems<TableFieldDto>("TableFieldDtos", db2Result5);

        var db1Result8 = await GridColumnDataIndexedDb.GetByIndex<int, TableFieldDto>("TableFieldDtos", 11, 18, "tableFieldId", true);
        var db2Result8 = await SecuritySuiteDataIndexedDb.GetByIndex<int, TableFieldDto>("TableFieldDtos", 11, 18, "tableFieldId", true);

        var db1Result9 = await GridColumnDataIndexedDb.GetByIndex<int?, TableFieldDto>("TableFieldDtos", 11, null, "tableFieldId", false);
        var db2Result9 = await SecuritySuiteDataIndexedDb.GetByIndex<int?, TableFieldDto>("TableFieldDtos", 11, null, "tableFieldId", false);

        var db1Result10 = await GridColumnDataIndexedDb.DeleteAll("TableFieldDtos");
        var db2Result10 = await SecuritySuiteDataIndexedDb.DeleteAll("TableFieldDtos");

        var db1Result11 = await GridColumnDataIndexedDb.DeleteIndexedDb();
        var db2Result11 = await SecuritySuiteDataIndexedDb.DeleteIndexedDb();
    }

}




